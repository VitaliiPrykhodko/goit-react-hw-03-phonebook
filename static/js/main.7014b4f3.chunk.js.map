{"version":3,"sources":["Form/Form.js","Contacts/ContactListItem.js","Contacts/ContactsList.js","Filter/Filter.js","App.js","index.js"],"names":["Form","state","name","number","handleChange","e","currentTarget","value","setState","handleClick","resetState","props","onClick","this","className","onChange","type","pattern","title","required","Component","ContactListItem","contacts","handleDeleteContact","map","key","ContactList","Filter","filter","handleFilter","App","handleAddContact","find","contact","alert","shortid","generate","contactId","prevState","localStorage","getItem","parseContacts","JSON","parse","setItem","stringify","normalizeFilter","toLowerCase","foundContacts","includes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kRAGMA,E,4MACJC,MAAQ,CACNC,KAAM,GACNC,OAAQ,I,EAGVC,aAAe,SAACC,GACd,MAAwBA,EAAEC,cAAlBJ,EAAR,EAAQA,KAAMK,EAAd,EAAcA,MACd,EAAKC,SAAL,eACGN,EAAOK,K,EAIZE,YAAc,WACZ,MAAyB,EAAKR,MAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,OACd,EAAKO,aACL,EAAKC,MAAMC,QAAQV,EAAMC,GACzB,EAAKK,SAAS,CAAEN,KAAM,GAAIC,OAAQ,M,EAGpCO,WAAa,WACX,EAAKF,SAAS,CACZN,KAAM,GACNC,OAAQ,M,4CAIZ,WACE,MAAyBU,KAAKZ,MAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,OACd,OACE,uBAAMW,UAAU,eAAhB,UACE,wBAAOA,UAAU,aAAjB,iBAEE,uBACEC,SAAUF,KAAKT,aACfG,MAAOL,EACPY,UAAU,gBACVE,KAAK,OACLd,KAAK,OACLe,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,OAGZ,wBAAOL,UAAU,aAAjB,mBAEE,uBACEC,SAAUF,KAAKT,aACfG,MAAOJ,EACPW,UAAU,gBACVE,KAAK,MACLd,KAAK,SACLe,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,OAGZ,wBACEH,KAAK,SACLF,UAAU,cACVF,QAASC,KAAKJ,YAHhB,gC,GAzDWW,aAyEJpB,IC1ETqB,EAAkB,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,SAAUC,EAA0B,EAA1BA,oBACjC,OAAOD,EAASE,KAAI,YAAwB,IAAtBC,EAAqB,EAArBA,IAAIvB,EAAiB,EAAjBA,KAAKC,EAAY,EAAZA,OAC5B,OACH,qBAAcW,UAAU,eAAxB,UACE,+BAAOZ,IADT,KACuB,+BAAOC,IAC5B,wBAAQW,UAAU,cAAcF,QAAS,kBAAMW,EAAoBE,IAAnE,sBAFOA,OCaEC,EAfK,SAAC,GAAqC,IAApCJ,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,oBAC5B,OACI,oBAAIT,UAAU,eAAd,SACY,cAAC,EAAD,CACIQ,SAAUA,EACVC,oBAAqBA,OCgB9BI,EAtBD,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,aACpB,OACI,qBAAKf,UAAU,aAAf,SACK,wBAAOA,UAAU,eAAjB,kCAEL,uBACEC,SAAUc,EACVtB,MAAOqB,EACPd,UAAU,6BACVE,KAAK,eCLTc,E,4MACJ7B,MAAQ,CACNqB,SAAU,GACVM,OAAQ,I,EAoBVC,aAAe,SAACxB,GACd,IAAQE,EAAUF,EAAEC,cAAZC,MACR,EAAKC,SAAS,CACZoB,OAAQrB,K,EAIZwB,iBAAmB,SAAC7B,EAAMC,GACxB,IAAQmB,EAAa,EAAKrB,MAAlBqB,SACR,OACEA,EAASU,MAAK,SAACC,GACb,OAAOA,EAAQ/B,OAASA,GAAQ+B,EAAQ9B,SAAWA,KAG9C+B,MAAM,GAAD,OAAIhC,EAAJ,4BAED,KAATA,GAA0B,KAAXC,EAAsB+B,MAAM,kCAE7C,EAAK1B,SAAS,CACZc,SAAS,GAAD,mBACHA,GADG,CAEN,CACEG,IAAKU,IAAQC,WACblC,KAAMA,EACNC,OAAQA,Q,EAOlBoB,oBAAsB,SAACc,GACrB,EAAK7B,UAAS,SAAC8B,GAAD,MAAgB,CAC5BhB,SAAUgB,EAAUhB,SAASM,QAC3B,SAACK,GAAD,OAAaA,EAAQR,MAAQY,U,uDAlDnC,WACC,IAAMf,EAAYiB,aAAaC,QAAQ,YAChCC,EAAgBC,KAAKC,MAAMrB,GAC7BmB,GACF5B,KAAKL,SAAS,CACdc,SAAUmB,M,gCAKb,SAAmBH,GACdzB,KAAKZ,MAAMqB,WAAagB,EAAUhB,UACpCiB,aAAaK,QAAQ,WAAWF,KAAKG,UAAUhC,KAAKZ,MAAMqB,a,oBA2C9D,WACE,MAA6BT,KAAKZ,MAA1BqB,EAAR,EAAQA,SAAUM,EAAlB,EAAkBA,OACZkB,EAAkBlB,EAAOmB,cAEzBC,EAAgB1B,EAASM,QAAO,SAACK,GACrC,OAAOA,EAAQ/B,KAAK6C,cAAcE,SAASH,MAG7C,OACE,sBAAKhC,UAAU,MAAf,UACE,2CACA,cAAC,EAAD,CAAMF,QAASC,KAAKkB,mBACpB,oBAAIjB,UAAU,gBAAd,sBACA,cAAC,EAAD,CAAQc,OAAQA,EAAQC,aAAchB,KAAKgB,eAC3C,cAAC,EAAD,CACEP,SAAU0B,EACVzB,oBAAqBV,KAAKU,6B,GA9ElBH,aAqFHU,I,MCtFfoB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7014b4f3.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\nimport React, { Component } from \"react\";\r\n\r\nclass Form extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    const { name, value } = e.currentTarget;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleClick = () => {\r\n    const { name, number } = this.state;\r\n    this.resetState()\r\n    this.props.onClick(name, number);\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  resetState = () => {\r\n    this.setState({\r\n      name: \"\",\r\n      number: \"\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <form className=\"form_contact\">\r\n        <label className=\"form_label\">\r\n          Name\r\n          <input\r\n            onChange={this.handleChange}\r\n            value={name}\r\n            className=\"input_contact\"\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </label>\r\n        <label className=\"form_label\">\r\n          Number\r\n          <input\r\n            onChange={this.handleChange}\r\n            value={number}\r\n            className=\"input_contact\"\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n          />\r\n        </label>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn_contact\"\r\n          onClick={this.handleClick}\r\n        >\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nForm.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Form;\r\n","import PropTypes from \"prop-types\";\r\n\r\nconst ContactListItem = ({ contacts, handleDeleteContact }) => {\r\n    return contacts.map(({key,name,number}) => {\r\n       return (\r\n    <li key={key} className=\"contact_item\">\r\n      <span>{name}</span>: <span>{number}</span>\r\n      <button className=\"contact_btn\" onClick={() => handleDeleteContact(key)}>\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n   })\r\n  \r\n};\r\n\r\nContactListItem.propTypes = {\r\n    contacts: PropTypes.arrayOf(PropTypes.shape({\r\n        key: PropTypes.node.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        number: PropTypes.string.isRequired\r\n    })),\r\n    handleDeleteContact: PropTypes.func.isRequired\r\n}\r\n\r\n\r\nexport { ContactListItem };\r\n","import PropTypes from \"prop-types\";\r\nimport {ContactListItem} from \"./ContactListItem\"\r\n\r\nconst ContactList = ({contacts, handleDeleteContact}) => {\r\n    return (\r\n        <ul className=\"contact_list\">\r\n                    <ContactListItem\r\n                        contacts={contacts}\r\n                        handleDeleteContact={handleDeleteContact}\r\n                    />\r\n          </ul>\r\n    )\r\n}\r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.arrayOf(PropTypes.object.isRequired),\r\n    handleDeleteContact: PropTypes.func.isRequired\r\n}\r\nexport default ContactList","import PropTypes from \"prop-types\";\r\n\r\nconst Filter= ({filter, handleFilter}) => {\r\n    return (\r\n        <div className=\"filter_box\">\r\n             <label className=\"filter_label\">\r\n        Find contacts by name\r\n        <input\r\n          onChange={handleFilter}\r\n          value={filter}\r\n          className=\"input_contact input_filter\"\r\n          type=\"text\"\r\n        />\r\n      </label>\r\n        </div>\r\n       \r\n    )\r\n}\r\n\r\nFilter.propTypes = {\r\n    filter: PropTypes.string,\r\n    handleFilter: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Filter","import React, { Component } from \"react\";\r\nimport shortid from \"shortid\";\r\nimport Form from \"./Form/Form.js\";\r\nimport ContactList from \"./Contacts/ContactsList\";\r\nimport Filter from \"./Filter/Filter\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    contacts: [],\r\n    filter: \"\",\r\n  };\r\n  \r\n\r\n  componentDidMount() {\r\n   const contacts =  localStorage.getItem('contacts')\r\n    const parseContacts = JSON.parse(contacts)\r\n    if (parseContacts) {\r\n      this.setState({\r\n      contacts: parseContacts\r\n    })\r\n    }\r\n  }\r\n\r\n   componentDidUpdate(prevState) {\r\n    if (this.state.contacts !== prevState.contacts) {\r\n      localStorage.setItem('contacts',JSON.stringify(this.state.contacts))\r\n    }\r\n  }\r\n\r\n  handleFilter = (e) => {\r\n    const { value } = e.currentTarget;\r\n    this.setState({\r\n      filter: value,\r\n    });\r\n  };\r\n\r\n  handleAddContact = (name, number) => {\r\n    const { contacts } = this.state;\r\n    if (\r\n      contacts.find((contact) => {\r\n        return contact.name === name || contact.number === number;\r\n      })\r\n    )\r\n      return alert(`${name} is already in contacts`);\r\n\r\n    if (name === \"\" || number === \"\") return alert(\"Please enter correct name\");\r\n    else {\r\n      this.setState({\r\n        contacts: [\r\n          ...contacts,\r\n          {\r\n            key: shortid.generate(),\r\n            name: name,\r\n            number: number,\r\n          },\r\n        ],\r\n      });\r\n    }\r\n  };\r\n\r\n  handleDeleteContact = (contactId) => {\r\n    this.setState((prevState) => ({\r\n      contacts: prevState.contacts.filter(\r\n        (contact) => contact.key !== contactId\r\n      ),\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const { contacts, filter } = this.state;\r\n    const normalizeFilter = filter.toLowerCase();\r\n\r\n    const foundContacts = contacts.filter((contact) => {\r\n      return contact.name.toLowerCase().includes(normalizeFilter);\r\n    });\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Phonebook</h1>\r\n        <Form onClick={this.handleAddContact} />\r\n        <h2 className=\"contact_title\">Contacts</h2>\r\n        <Filter filter={filter} handleFilter={this.handleFilter} />\r\n        <ContactList\r\n          contacts={foundContacts}\r\n          handleDeleteContact={this.handleDeleteContact}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './main.scss'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}